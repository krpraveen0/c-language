Pointers 
--------------
1.) Understanding Memory Address.
2.) pointer OPerators.
3.) Pointer.
4.) Decalaration of Pointer Variables.
5.) Initialization of Pointer Variables.
6.) Dereferencing/Redirecting Pointer Variables.
7.) Decalaration versus Redirection.
8.) Void Pointer.
9.) Null Pointer.
10.) Passing 1D array to Function.
11.) passing 2D array to Function.
12.) Passing Strings to Function.
13.) Parameter Passing Techniques.
14.) Functions returning pointers.
15.) Compatibility.
16.) Pointer Airthmetic(Operations on Pointer.).
17.) Pointers and One-Dimensional Arrays.
18.) Pointers and two-Dimensional Arrays.
19.) Passing an array to a Function.
20.) Memory Allocation Functions.
21.) Pointer to Function.
22.) Pointers and Strings.

1.) Understanding Memory Address.
------------------------------------
The memory of a computer is made up of bytes arranged in a sequential manner.
Each byte has an index number, which is called as address of that byte.
So the address of these bytes starts from zero and the address last byte is one less than the size of the memory.
It is very necessary to declare a Variable before using it,since compiler has to reserve space for it.
For example:
        int  num = 2;
    
In the above statement is executed in a c program, the following tasks are done by the compiler:
1.) Allocates a memory location.
2.) The name 'num' assigned to the allocated memory location.
3.) The value 2 is stored into the memory.

memory layout of the memory elements of a C program:
---------------------------------------------------------

memory section name                                                                    Description

1.) Text(or the code segment)        This is the area of memory that contains the machine instructions
                                     corresponding to the compiled program.
                                     this area is READ ONLY and shared by a multiple instaces of running program.
                                
2.) Data                             This area in the memory image of a running program contains storage for
                                     initialized global variables.
                                     this area is separate for Each running instances of program.

3.) BSS                              This is the memory area that contains storage for uninitialized global variables.
                                     It is also separate for each running instaces of a program.

4.) Stack                            This memory area contains storage for automatic (local) variables in the program.
                                     It also stores context-specific information before a Function call.
                                     e.g the value of the instruction pointer(program counter) registers before a Function
                                     call is made.

5.) Heap                             This memory region is reserved for dynamically allocating memory for 
                                     variables at run-time.
                                     Dynamic memory allocation is done by using the malloc and calloc functions.

6.) Shared libraries                 This region contains the executable image of shared libraries being used by the program.



2.) pointer OPerators:
---------------------
There are two pointer operator:
    i) Address of operator(&).
    ii) Value at Address operator(*).

i) Address of operator(&):
-------------------------------
It returns the address of the memory location alloted to a specified variable.

Syntax: & variable-name
example : &num // this gives the address of the memory location of variable num 

ii) Value at Address operator(*):
------------------------------------
It returns the value stored inside the memory location at the specified address.
It is also called as 'indirection' operator.

Syntax:  * MemoryLocation-address
example: *(&num).


3.) Pointer.
------------------
A pointer is a variable which holds the memory address of another variable.

NOte: If one variable contains the address of another variable, then the first variable is said to point
to the second 

advantages:
-----------------
1.) Use of pointers in C program makes it more efficient and compact.

Some of the important uses of pointers are:
--------------------------------------------
1.) Accessing array elements.
2.) returning more than one value from a function by passing argument to the functions using call by address.
3.) Passing array and strings to functions.
4.) implementing the data structures like linked list, tree, graph etc.
5.) Obtaining memory form the system dynamically.
6.) Pointer can improve the efficiency of certain routines.


Note: The pointer are one of the most important and strongest topic/concept in c language but 
also it is the most dangerous feature in C.
1.) uninitialized pointers(or pointers containing invalid values) can cause our system to crash.
2.) perhaps worse, it is easy to use pointers incorrectly, casing bugs that are very difficult to find.

Decalaration of Pointer Variables:
------------------------------------------
Syntax:
        datatype  * pointer-variable;
    where pointer-variable is the name of pointer only.
    example:
            int *ptr;
            float *fptr;
            char *cptr;

In above line ptr is a pointer that should point to variable of type int, 

All pointers irrespecive of there base type will occupy same space in the memory since all of them contains address only.
Generally 2 bytes of memory is used to store an address.


5.) Initialization of Pointer Variables.
-----------------------------------------------
C program does not initializes variables. 
so as we start our program all the uninitialized variables have unknown grabage value. As 
pointer is also a variable the same applies for it.

To avoid any uninitialized pointer errors we should initialize our pointers just after its decalaration.

syntax:
decalaration:
        data-type *variable-name ;

decalaration & Initialization :
        data-type *variable-name = address-of-other-variable;
        



assignment question
------------------------
1. write a program to print numbers 1 to 10;
2. write a program to print even number between 1 to 50.
3. write a program to reverse a string given by the user.
4. write a program to check if the given input by the user is palindrome or not.
5. write a program to swap two numbers using pointers.